{"name":"PHP-MCE","tagline":"PHP Multi-Class-Extension Architecture","body":"PHP-MCE\r\n=======\r\n\r\nPHP Multi-Class-Extension Architecture can be [found on GitHub] (https://github.com/sourcerer-mike/php-mce).\r\n\r\nTake down the limits of `class ... extends ...` to extend with multiple classes instead of only one.\r\n\r\nFor example you extend `\\Foo` by two plugins:\r\n\r\n```\r\n├── Base\r\n│   └── Foo\r\n├── PluginOne\r\n│   └── Foo\r\n└── PluginTwo\r\n    └── Foo\r\n```\r\n\r\n- PluginOne will make it `PluginOne\\Foo` extending the default `\\Base\\Foo`.\r\n- PluginTwo will make it `PluginTwo\\Foo` extending the previous state (here: PluginOne).\r\n\r\nUntil now this is almost done like that:\r\n\r\n```\r\n/*\r\n * First extension\r\n */\r\nrequire_once 'PluginOne/Foo.php';\r\n\r\n// enable the following line to have \\PluginOne\\Foo instead of \\Base\\Foo\r\n\\Registry::getLoader()->setClassAlias('Foo', '\\PluginOne\\Foo');\r\n\r\n/*\r\n * Second extension\r\n */\r\nrequire_once 'PluginTwo/Foo.php';\r\n\r\n// enable the next to even extend it twice and use \\PluginTwo\\Foo\r\n\\Registry::getLoader()->setClassAlias('Foo', '\\PluginTwo\\Foo');\r\n\r\n$foo = new \\Foo();\r\necho get_class($foo), PHP_EOL;\r\necho $foo->bar(), PHP_EOL;\r\n```\r\n\r\n[Take a look at it on GitHub now!] (https://github.com/sourcerer-mike/php-mce)\r\n","google":"UA-46278774-1","note":"Don't delete this file! It's used internally to help with page regeneration."}